module("Core tests");test("replace with loop",function(){expect(1);before_and_after_replace({loop:true})});test("replace without loop",function(){expect(1);before_and_after_replace({loop:false})});function before_and_after_replace(a){var d=$("#simple"),b=d.html(),c=null;d.owlCarousel(a);c=d.html();d.trigger("replace.owl.carousel",[b]);d.trigger("refresh.owl.carousel");equal(d.html(),c,"Inner HTML before and after replace equals.")}test("remove with loop",function(){expect(3);before_and_after_remove({loop:true})});test("remove without loop",function(){expect(3);before_and_after_remove({loop:false})});function before_and_after_remove(b){var e=$("#simple"),c=e.clone().removeAttr("id").insertAfter("#simple"),a=c.clone().insertAfter(c),d=a.clone().insertAfter(a);c.children(":eq(0)").remove();a.children(":eq(0),:eq(2)").remove();d.children().remove();e.owlCarousel(b);c.owlCarousel(b);a.owlCarousel(b);d.owlCarousel(b);e.trigger("remove.owl.carousel",[0]);e.trigger("refresh.owl.carousel");equal(e.html(),c.html(),"Inner HTML before and after remove one equals.");e.trigger("remove.owl.carousel",[1]);e.trigger("refresh.owl.carousel");equal(e.html(),a.html(),"Inner HTML before and after remove two equals.");e.trigger("remove.owl.carousel",[0]);e.trigger("refresh.owl.carousel");equal(e.html(),d.html(),"Inner HTML before and after remove all equals.")}test("remove and add with loop",function(){expect(1);before_and_after_remove_add({loop:true})});test("remove and add without loop",function(){expect(1);before_and_after_remove_add({loop:false})});function before_and_after_remove_add(b){var c=$("#simple"),a=$("#simple").clone().removeAttr("id").insertAfter("#simple");a.children(":eq(0)").text("2");a.children(":eq(1)").text("3");a.children(":eq(2)").text("1");c.owlCarousel(b);a.owlCarousel(b);c.trigger("remove.owl.carousel",[0]);c.trigger("add.owl.carousel",["<li>1</li>"]);c.trigger("refresh.owl.carousel");equal(c.html(),a.html(),"Inner HTML before and after `remove()` and `add()` equals.")}test("invalidate",function(){expect(6);var a=$("#simple").owlCarousel().data("owl.carousel");deepEqual(a.invalidate(),[],"No invalid parts after initializing.");a.invalidate("first");deepEqual(a.invalidate(),["first"],"One invalid part after invalidating one.");a.invalidate("second");deepEqual(a.invalidate(),["first","second"],"Two invalid parts after invalidating a second one.");a.invalidate("second");deepEqual(a.invalidate(),["first","second"],"Two invalid parts after invalidating a part twice.");a.update();deepEqual(a.invalidate(),[],"No invalid parts after updating.");deepEqual(a.invalidate("first"),["first"],"Invalidating one part returns it directly.")});test("destroy",function(){expect(1);var b=$("#simple"),a=b.get(0).outerHTML.replace(/\s{2,}/g,"");b.owlCarousel().owlCarousel("destroy");equal(b.get(0).outerHTML.replace(/\s{2,}/g,""),a,"Outer HTML before create and after destroy is equal.")});start();